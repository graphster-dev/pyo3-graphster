from typing import Dict, List, Tuple, TypeAlias, Union

class PyBoolean:
    def __init__(self, value: bool) -> None: ...
    def value(self) -> bool: ...

class PyFloat32:
    def __init__(self, value: float) -> None: ...
    def value(self) -> float: ...

class PyFloat64:
    def __init__(self, value: float) -> None: ...
    def value(self) -> float: ...

class PyInt128:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyInt16:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyInt32:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyInt64:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyInt8:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyString:
    def __init__(self, value: str) -> None: ...
    def value(self) -> str: ...

class PyUInt128:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyUInt16:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyUInt32:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyUInt64:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyUInt8:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

class PyUsize:
    def __init__(self, value: int) -> None: ...
    def value(self) -> int: ...

PyAttributeValue: TypeAlias = Union[
    int,
    bool,
    str,
    float,
    PyFloat32,
    PyFloat64,
    PyInt128,
    PyInt16,
    PyInt32,
    PyInt64,
    PyInt8,
    PyString,
    PyUInt128,
    PyUInt16,
    PyUInt32,
    PyUInt64,
    PyUInt8,
    PyUsize,
    None,
]

PyAttributeKey: TypeAlias = Union[
    int,
    bool,
    str,
    PyInt128,
    PyInt16,
    PyInt32,
    PyInt64,
    PyInt8,
    PyString,
    PyUInt128,
    PyUInt16,
    PyUInt32,
    PyUInt64,
    PyUInt8,
    PyUsize,
]

PyNodeIndex: TypeAlias = PyAttributeKey
PyAttributes: TypeAlias = Dict[PyAttributeKey, PyAttributeValue]

class PyDataGraph:
    def __init__(self) -> None: ...
    @staticmethod
    def from_nodes(
        nodes: List[Tuple[PyNodeIndex, PyAttributes]],
    ) -> PyDataGraph: ...
    @staticmethod
    def from_nodes_and_edges(
        nodes: List[Tuple[PyNodeIndex, PyAttributes]],
        edges: List[Tuple[PyNodeIndex, PyNodeIndex, PyAttributes]],
    ) -> PyDataGraph: ...
    def add_node(self, node_index: PyNodeIndex, attributes: PyAttributes) -> None: ...
    def add_nodes(self, nodes: List[Tuple[PyNodeIndex, PyAttributes]]) -> None: ...
    def node_count(self) -> int: ...
    def edge_count(self) -> int: ...
